@page "/customeractivities"
@inject HttpClient Http

<PageTitle>Customer Activities</PageTitle>

<div class="container border p-1 rounded">
    <div class="row">
        <div class="col">
            <h2>Customer Activities</h2>
        </div>
@*        <div class="col text-end">
            <label for="search">Filter</label>
            <input id="serach" @oninput="OnFilterCriteriaChange" />
        </div>*@
    </div>
    <div class="row">
        <div class="col">
            @debugLabel
        </div>
        <div>

        </div>
    </div>
</div>

<div class="container border p-1 rounded">
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-info" @onclick="New">New</button>
        </div>
    </div>
</div>
<br/>
@if (list == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RecordList Items="@list" Context="customeractivity" TItem="@SharedLibrary.CustomerActivity" OnAfterItemClicked="OnAfterItemClicked">
        <TableHeader>
            <th>Id</th>
            <th>Description</th>
        </TableHeader>
        <TableRow>
            <td>@customeractivity.Id</td>
            <td>@customeractivity.Description</td>
        </TableRow>
    </RecordList>

    @if (pageStatus.CardOpen)
    {
        <CustomerActivityCard Caption="Customer Activity"
            Rec="@currRec"
            OnCancel="@OnCancel"
            OnSave="@OnSave"
          OnDelete="@OnDelete" />
    }
}


@code {
    private string debugLabel = string.Empty;
    private PageStatus pageStatus = new();
    private List<SharedLibrary.CustomerActivity>? list;
    private List<SharedLibrary.CustomerActivity>? rawList;
    private SharedLibrary.CustomerActivity? currRec;

    protected override async Task OnInitializedAsync()
    {
        var listResponseTask = Http.GetAsync("/api/customeractivity");
        await Task.WhenAll(listResponseTask);

        var response = listResponseTask.Result;
        var body = response.Content.ReadAsStringAsync().Result;
        rawList = System.Text.Json.JsonSerializer.Deserialize<List<SharedLibrary.CustomerActivity>>(body);
        list = System.Text.Json.JsonSerializer.Deserialize<List<SharedLibrary.CustomerActivity>>(body);

        if (list is not null)
        {
            if (list.Count > 0)
                currRec = list[0];
        }
    }

    private void OnAfterItemClicked(SharedLibrary.CustomerActivity rec)
    {
        currRec = rec;
        pageStatus.CurrRecIndex = list.FindIndex(a => a.Id == currRec.Id);
        OpenCard();
    }


    private void OpenCard()
    {
        pageStatus.CardOpen = true;
    }

    private void OnCancel(bool action)
    {
        pageStatus.CardOpen = false;
    }

    private async Task OnSave(SharedLibrary.CustomerActivity rec)
    {
        currRec = rec;
        await Save();
        pageStatus.CardOpen = false;
    }

    private async Task OnDelete(SharedLibrary.CustomerActivity rec)
    {
        currRec = rec;
        await Delete();
        pageStatus.CardOpen = false;
    }


    private void New()
    {
        currRec = new();
        OpenCard();
    }

    private async Task Save()
    {
        var newEntry = string.IsNullOrWhiteSpace(currRec.Id);
        using var httpResponse = await Http.PostAsJsonAsync<SharedLibrary.CustomerActivity>("api/customeractivity", currRec);
        currRec = await httpResponse.Content.ReadFromJsonAsync<SharedLibrary.CustomerActivity>();
        if (newEntry)
        {
            rawList.Add(currRec);
            list.Add(currRec);
            pageStatus.CurrRecIndex = list.FindIndex(a => a.Id == currRec.Id);
        }
        list[pageStatus.CurrRecIndex] = currRec;

    }

    private async Task Delete()
    {
        await Http.DeleteAsync($"api/customeractivity/{currRec.Id}");
        list.RemoveAt(pageStatus.CurrRecIndex);
        // Remove from raw list too
        pageStatus.CurrRecIndex--;
        if (pageStatus.CurrRecIndex >= 0)
            currRec = list[pageStatus.CurrRecIndex];
        else
            currRec = new();
    }
}