<RecordCard Caption="@Caption" OnCancel="OnCancel">
    <div class="modal-body">
        @if (Rec != null)
        {
            <RecordCardField TItem="string" Caption="Name" @bind-Value="@Rec.Name" @bind-Value:event="ValueChanged" />
            <RecordCardField TItem="string" Caption="Last Name" @bind-Value="@Rec.LastName" @bind-Value:event="ValueChanged" />
            <RecordCardField TItem="string"  Caption="Address" @bind-Value="@Rec.Address" @bind-Value:event="ValueChanged" />
            <RecordCardField TItem="string" Caption="City" @bind-Value="@Rec.City" @bind-Value:event="ValueChanged" />
            <RecordCardField TItem="string" Caption="Post Code" @bind-Value="@Rec.PostCode" @bind-Value:event="ValueChanged" />
            <RecordCardField TItem="string" Caption="Country Code" @bind-Value="@Rec.CountryCode" @bind-Value:event="ValueChanged" />
            @*
                TODO: If the field has a dropdown, have Parameter in the component to accept the list
            *@
        }
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
        <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
    </div>
</RecordCard>
@code {
    [Parameter] public string Caption { get; set; } = string.Empty;
    [Parameter] public SharedLibrary.Customer Rec { get; set; } = new();
    [Parameter] public EventCallback<bool> OnCancel { get; set; }
    [Parameter] public EventCallback<SharedLibrary.Customer> OnSave { get; set; }
    [Parameter] public EventCallback<SharedLibrary.Customer> OnDelete { get; set; }

    private Task Save()
    {
        return OnSave.InvokeAsync(Rec);

    }

    private Task Delete()
    {
        return OnDelete.InvokeAsync(Rec);
    }
}
